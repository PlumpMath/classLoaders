package instinctools.project.loader;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

public class ModuleLoader extends ClassLoader {
	private String path;
	private Logger log = LogManager.getLogger("Logger");
	public ModuleLoader(String path, ClassLoader parent) {
		super(parent);
		this.path = path.trim();
		File dir = new File(path);
		String[] modules = dir.list();
		for (String module : modules) {
			log.info(module);
		}
	}

	@Override
	public Class<?> findClass(String className) throws ClassNotFoundException {
		try {
			JarFile jf = new JarFile(path +"\\"+ className);
			Enumeration entries = jf.entries();
			byte[] b = null;
			while (entries.hasMoreElements()) {
				JarEntry jarEntry = (JarEntry) entries.nextElement();
				b = loadClassData(jf, jarEntry);
				log.info(jarEntry.getName());
			}
			entries = jf.entries();
			while (entries.hasMoreElements()) {
				if(true)
				JarEntry jarEntry = (JarEntry) entries.nextElement();
				b = loadClassData(jf, jarEntry);
				jarEntry.getName();
				return defineClass(null, b, 0, b.length);
			}
		} catch (FileNotFoundException ex) {
			return super.findClass(className);
		} catch (IOException ex) {
			return super.findClass(className);
		}

	}

	private byte[] loadClassData(JarFile jarFile, JarEntry jarEntry) throws IOException {
		long size = jarEntry.getSize();
		if (size == -1 || size == 0)
			return null;
		byte[] data = new byte[(int) size];
		InputStream in = jarFile.getInputStream(jarEntry);
		in.read(data);
		return data;
	}
/*
	private byte[] fetchClassFromFS(String path) throws FileNotFoundException, IOException {
		InputStream is = new FileInputStream(new File(path));

		long length = new File(path).length();

		byte[] bytes = new byte[(int) length];

		int offset = 0;
		int numRead = 0;
		while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
			offset += numRead;
		}

		if (offset < bytes.length) {
			is.close();
			throw new IOException("Could not completely read file " + path);
		}

		is.close();
		return bytes;

	}*/
}
